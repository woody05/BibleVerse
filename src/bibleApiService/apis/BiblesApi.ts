/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAudioBible200Response,
  GetBible200Response,
  GetBibles200Response,
} from '../models/index';
import {
    GetAudioBible200ResponseFromJSON,
    GetAudioBible200ResponseToJSON,
    GetBible200ResponseFromJSON,
    GetBible200ResponseToJSON,
    GetBibles200ResponseFromJSON,
    GetBibles200ResponseToJSON,
} from '../models/index';

export interface GetAudioBibleRequest {
    audioBibleId: string;
}

export interface GetAudioBiblesRequest {
    language?: string;
    abbreviation?: string;
    name?: string;
    ids?: string;
    bibleId?: string;
    includeFullDetails?: boolean;
}

export interface GetBibleRequest {
    bibleId: string;
}

export interface GetBiblesRequest {
    language?: string;
    abbreviation?: string;
    name?: string;
    ids?: string;
    includeFullDetails?: boolean;
}

/**
 * 
 */
export class BiblesApi extends runtime.BaseAPI {

    /**
     * Gets a single audio `Bible` for a given `audioBibleId` 
     */
    async getAudioBibleRaw(requestParameters: GetAudioBibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAudioBible200Response>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioBible().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/audio-bibles/{audioBibleId}`;
        urlPath = urlPath.replace(`{${"audioBibleId"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAudioBible200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a single audio `Bible` for a given `audioBibleId` 
     */
    async getAudioBible(requestParameters: GetAudioBibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAudioBible200Response> {
        const response = await this.getAudioBibleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of audio `Bible` objects authorized for current API Key 
     */
    async getAudioBiblesRaw(requestParameters: GetAudioBiblesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBibles200Response>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['abbreviation'] != null) {
            queryParameters['abbreviation'] = requestParameters['abbreviation'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['bibleId'] != null) {
            queryParameters['bibleId'] = requestParameters['bibleId'];
        }

        if (requestParameters['includeFullDetails'] != null) {
            queryParameters['include-full-details'] = requestParameters['includeFullDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/audio-bibles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBibles200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of audio `Bible` objects authorized for current API Key 
     */
    async getAudioBibles(requestParameters: GetAudioBiblesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBibles200Response> {
        const response = await this.getAudioBiblesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single `Bible` for a given `bibleId` 
     */
    async getBibleRaw(requestParameters: GetBibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBible200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBible().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBible200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a single `Bible` for a given `bibleId` 
     */
    async getBible(requestParameters: GetBibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBible200Response> {
        const response = await this.getBibleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of `Bible` objects authorized for current API Key 
     */
    async getBiblesRaw(requestParameters: GetBiblesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBibles200Response>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['abbreviation'] != null) {
            queryParameters['abbreviation'] = requestParameters['abbreviation'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['includeFullDetails'] != null) {
            queryParameters['include-full-details'] = requestParameters['includeFullDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBibles200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of `Bible` objects authorized for current API Key 
     */
    async getBibles(requestParameters: GetBiblesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBibles200Response> {
        const response = await this.getBiblesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
