/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetBook200Response,
  GetBooks200Response,
} from '../models/index';
import {
    GetBook200ResponseFromJSON,
    GetBook200ResponseToJSON,
    GetBooks200ResponseFromJSON,
    GetBooks200ResponseToJSON,
} from '../models/index';

export interface GetAudioBookRequest {
    audioBibleId: string;
    bookId: string;
    includeChapters?: boolean;
}

export interface GetAudioBooksRequest {
    audioBibleId: string;
    includeChapters?: boolean;
    includeChaptersAndSections?: boolean;
}

export interface GetBookRequest {
    bibleId: string;
    bookId: string;
    includeChapters?: boolean;
}

export interface GetBooksRequest {
    bibleId: string;
    includeChapters?: boolean;
    includeChaptersAndSections?: boolean;
}

/**
 * 
 */
export class BooksApi extends runtime.BaseAPI {

    /**
     * Gets a single `Book` object for a given `audioBibleId` and `bookId` 
     */
    async getAudioBookRaw(requestParameters: GetAudioBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBook200Response>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioBook().'
            );
        }

        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getAudioBook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeChapters'] != null) {
            queryParameters['include-chapters'] = requestParameters['includeChapters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/audio-bibles/{audioBibleId}/books/{bookId}`;
        urlPath = urlPath.replace(`{${"audioBibleId"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));
        urlPath = urlPath.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBook200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a single `Book` object for a given `audioBibleId` and `bookId` 
     */
    async getAudioBook(requestParameters: GetAudioBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBook200Response> {
        const response = await this.getAudioBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of `Book` objects for a given `audioBibleId` 
     */
    async getAudioBooksRaw(requestParameters: GetAudioBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBooks200Response>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioBooks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeChapters'] != null) {
            queryParameters['include-chapters'] = requestParameters['includeChapters'];
        }

        if (requestParameters['includeChaptersAndSections'] != null) {
            queryParameters['include-chapters-and-sections'] = requestParameters['includeChaptersAndSections'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/audio-bibles/{audioBibleId}/books`;
        urlPath = urlPath.replace(`{${"audioBibleId"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBooks200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of `Book` objects for a given `audioBibleId` 
     */
    async getAudioBooks(requestParameters: GetAudioBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBooks200Response> {
        const response = await this.getAudioBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single `Book` object for a given `bibleId` and `bookId` 
     */
    async getBookRaw(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBook200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBook().'
            );
        }

        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeChapters'] != null) {
            queryParameters['include-chapters'] = requestParameters['includeChapters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/books/{bookId}`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBook200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a single `Book` object for a given `bibleId` and `bookId` 
     */
    async getBook(requestParameters: GetBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBook200Response> {
        const response = await this.getBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of `Book` objects for a given `bibleId` 
     */
    async getBooksRaw(requestParameters: GetBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBooks200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBooks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeChapters'] != null) {
            queryParameters['include-chapters'] = requestParameters['includeChapters'];
        }

        if (requestParameters['includeChaptersAndSections'] != null) {
            queryParameters['include-chapters-and-sections'] = requestParameters['includeChaptersAndSections'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/books`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBooks200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of `Book` objects for a given `bibleId` 
     */
    async getBooks(requestParameters: GetBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBooks200Response> {
        const response = await this.getBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
