/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAudioChapter200Response,
  GetChapter200Response,
  GetChapters200Response,
} from '../models/index';
import {
    GetAudioChapter200ResponseFromJSON,
    GetAudioChapter200ResponseToJSON,
    GetChapter200ResponseFromJSON,
    GetChapter200ResponseToJSON,
    GetChapters200ResponseFromJSON,
    GetChapters200ResponseToJSON,
} from '../models/index';

export interface GetAudioChapterRequest {
    audioBibleId: string;
    chapterId: string;
}

export interface GetAudioChaptersRequest {
    audioBibleId: string;
    bookId: string;
}

export interface GetChapterRequest {
    bibleId: string;
    chapterId: string;
    contentType?: GetChapterContentTypeEnum;
    includeNotes?: boolean;
    includeTitles?: boolean;
    includeChapterNumbers?: boolean;
    includeVerseNumbers?: boolean;
    includeVerseSpans?: boolean;
    parallels?: string;
}

export interface GetChaptersRequest {
    bibleId: string;
    bookId: string;
}

/**
 * 
 */
export class ChaptersApi extends runtime.BaseAPI {

    /**
     * Gets a single `Chapter` object for a given `audioBibleId` and `chapterId`. This AudioChapter object also includes an `resourceUrl` property with a HTTP URL to the mp3 audio resource for the chapter.  The `resourceUrl` is unique per request and expires in XX minutes.  The `expiresAt` property provides the Unix time value of `resourceUrl` expiration. 
     */
    async getAudioChapterRaw(requestParameters: GetAudioChapterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAudioChapter200Response>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioChapter().'
            );
        }

        if (requestParameters['chapterId'] == null) {
            throw new runtime.RequiredError(
                'chapterId',
                'Required parameter "chapterId" was null or undefined when calling getAudioChapter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/audio-bibles/{audioBibleId}/chapters/{chapterId}`;
        urlPath = urlPath.replace(`{${"audioBibleId"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));
        urlPath = urlPath.replace(`{${"chapterId"}}`, encodeURIComponent(String(requestParameters['chapterId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAudioChapter200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a single `Chapter` object for a given `audioBibleId` and `chapterId`. This AudioChapter object also includes an `resourceUrl` property with a HTTP URL to the mp3 audio resource for the chapter.  The `resourceUrl` is unique per request and expires in XX minutes.  The `expiresAt` property provides the Unix time value of `resourceUrl` expiration. 
     */
    async getAudioChapter(requestParameters: GetAudioChapterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAudioChapter200Response> {
        const response = await this.getAudioChapterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of `Chapter` objects for a given `audioBibleId` and `bookId` 
     */
    async getAudioChaptersRaw(requestParameters: GetAudioChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChapters200Response>> {
        if (requestParameters['audioBibleId'] == null) {
            throw new runtime.RequiredError(
                'audioBibleId',
                'Required parameter "audioBibleId" was null or undefined when calling getAudioChapters().'
            );
        }

        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getAudioChapters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/audio-bibles/{audioBibleId}/books/{bookId}/chapters`;
        urlPath = urlPath.replace(`{${"audioBibleId"}}`, encodeURIComponent(String(requestParameters['audioBibleId'])));
        urlPath = urlPath.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChapters200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of `Chapter` objects for a given `audioBibleId` and `bookId` 
     */
    async getAudioChapters(requestParameters: GetAudioChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChapters200Response> {
        const response = await this.getAudioChaptersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single `Chapter` object for a given `bibleId` and `chapterId`. This Chapter object also includes an `content` property with all verses for the Chapter. 
     */
    async getChapterRaw(requestParameters: GetChapterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChapter200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getChapter().'
            );
        }

        if (requestParameters['chapterId'] == null) {
            throw new runtime.RequiredError(
                'chapterId',
                'Required parameter "chapterId" was null or undefined when calling getChapter().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contentType'] != null) {
            queryParameters['content-type'] = requestParameters['contentType'];
        }

        if (requestParameters['includeNotes'] != null) {
            queryParameters['include-notes'] = requestParameters['includeNotes'];
        }

        if (requestParameters['includeTitles'] != null) {
            queryParameters['include-titles'] = requestParameters['includeTitles'];
        }

        if (requestParameters['includeChapterNumbers'] != null) {
            queryParameters['include-chapter-numbers'] = requestParameters['includeChapterNumbers'];
        }

        if (requestParameters['includeVerseNumbers'] != null) {
            queryParameters['include-verse-numbers'] = requestParameters['includeVerseNumbers'];
        }

        if (requestParameters['includeVerseSpans'] != null) {
            queryParameters['include-verse-spans'] = requestParameters['includeVerseSpans'];
        }

        if (requestParameters['parallels'] != null) {
            queryParameters['parallels'] = requestParameters['parallels'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/chapters/{chapterId}`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"chapterId"}}`, encodeURIComponent(String(requestParameters['chapterId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChapter200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a single `Chapter` object for a given `bibleId` and `chapterId`. This Chapter object also includes an `content` property with all verses for the Chapter. 
     */
    async getChapter(requestParameters: GetChapterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChapter200Response> {
        const response = await this.getChapterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of `Chapter` objects for a given `bibleId` and `bookId` 
     */
    async getChaptersRaw(requestParameters: GetChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChapters200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getChapters().'
            );
        }

        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getChapters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/books/{bookId}/chapters`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChapters200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of `Chapter` objects for a given `bibleId` and `bookId` 
     */
    async getChapters(requestParameters: GetChaptersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChapters200Response> {
        const response = await this.getChaptersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetChapterContentTypeEnum = {
    Html: 'html',
    Json: 'json',
    Text: 'text'
} as const;
export type GetChapterContentTypeEnum = typeof GetChapterContentTypeEnum[keyof typeof GetChapterContentTypeEnum];
