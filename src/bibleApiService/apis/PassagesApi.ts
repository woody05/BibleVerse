/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetPassage200Response,
} from '../models/index';
import {
    GetPassage200ResponseFromJSON,
    GetPassage200ResponseToJSON,
} from '../models/index';

export interface GetPassageRequest {
    bibleId: string;
    passageId: string;
    contentType?: GetPassageContentTypeEnum;
    includeNotes?: boolean;
    includeTitles?: boolean;
    includeChapterNumbers?: boolean;
    includeVerseNumbers?: boolean;
    includeVerseSpans?: boolean;
    parallels?: string;
    useOrgId?: boolean;
}

/**
 * 
 */
export class PassagesApi extends runtime.BaseAPI {

    /**
     * Gets a `Passage` object for a given `bibleId` and `passageId`. This Passage object also includes an `content` property with all verses corresponding to the passageId. The `passageId` parameter can represent a chapter, verse, or range of verses. 
     */
    async getPassageRaw(requestParameters: GetPassageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPassage200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getPassage().'
            );
        }

        if (requestParameters['passageId'] == null) {
            throw new runtime.RequiredError(
                'passageId',
                'Required parameter "passageId" was null or undefined when calling getPassage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contentType'] != null) {
            queryParameters['content-type'] = requestParameters['contentType'];
        }

        if (requestParameters['includeNotes'] != null) {
            queryParameters['include-notes'] = requestParameters['includeNotes'];
        }

        if (requestParameters['includeTitles'] != null) {
            queryParameters['include-titles'] = requestParameters['includeTitles'];
        }

        if (requestParameters['includeChapterNumbers'] != null) {
            queryParameters['include-chapter-numbers'] = requestParameters['includeChapterNumbers'];
        }

        if (requestParameters['includeVerseNumbers'] != null) {
            queryParameters['include-verse-numbers'] = requestParameters['includeVerseNumbers'];
        }

        if (requestParameters['includeVerseSpans'] != null) {
            queryParameters['include-verse-spans'] = requestParameters['includeVerseSpans'];
        }

        if (requestParameters['parallels'] != null) {
            queryParameters['parallels'] = requestParameters['parallels'];
        }

        if (requestParameters['useOrgId'] != null) {
            queryParameters['use-org-id'] = requestParameters['useOrgId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/passages/{passageId}`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"passageId"}}`, encodeURIComponent(String(requestParameters['passageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPassage200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a `Passage` object for a given `bibleId` and `passageId`. This Passage object also includes an `content` property with all verses corresponding to the passageId. The `passageId` parameter can represent a chapter, verse, or range of verses. 
     */
    async getPassage(requestParameters: GetPassageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPassage200Response> {
        const response = await this.getPassageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPassageContentTypeEnum = {
    Html: 'html',
    Json: 'json',
    Text: 'text'
} as const;
export type GetPassageContentTypeEnum = typeof GetPassageContentTypeEnum[keyof typeof GetPassageContentTypeEnum];
