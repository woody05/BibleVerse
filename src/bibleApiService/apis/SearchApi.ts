/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchBible200Response,
} from '../models/index';
import {
    SearchBible200ResponseFromJSON,
    SearchBible200ResponseToJSON,
} from '../models/index';

export interface SearchBibleRequest {
    bibleId: string;
    query?: string;
    limit?: number;
    offset?: number;
    sort?: SearchBibleSortEnum;
    range?: string;
    fuzziness?: SearchBibleFuzzinessEnum;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Gets search results for a given `bibleId` and query string.  Searches will match all verses with the list of keywords provided in the query string. Order of the keywords does not matter. However all keywords must be present in a verse for it to be considered a match. The total number of results returned from a search can be limited by populating the `limit` attribute in the query string with a non-negative integer value.  If no limit value is provide a default of 10 is used. `offset` can be used to traverse paginated results.  So for example if you are using the default `limit` of 10, using an `offset` of 10 will return the second page of results, namely results 11-20. The `text` property of each verse object contains only the verse text.  It does not contain footnote references. However, those can be queried directly using the `/bibles/{bibleId}/verses/{verseId}` endpoint. 
     */
    async searchBibleRaw(requestParameters: SearchBibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchBible200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling searchBible().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        if (requestParameters['fuzziness'] != null) {
            queryParameters['fuzziness'] = requestParameters['fuzziness'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/search`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchBible200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets search results for a given `bibleId` and query string.  Searches will match all verses with the list of keywords provided in the query string. Order of the keywords does not matter. However all keywords must be present in a verse for it to be considered a match. The total number of results returned from a search can be limited by populating the `limit` attribute in the query string with a non-negative integer value.  If no limit value is provide a default of 10 is used. `offset` can be used to traverse paginated results.  So for example if you are using the default `limit` of 10, using an `offset` of 10 will return the second page of results, namely results 11-20. The `text` property of each verse object contains only the verse text.  It does not contain footnote references. However, those can be queried directly using the `/bibles/{bibleId}/verses/{verseId}` endpoint. 
     */
    async searchBible(requestParameters: SearchBibleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchBible200Response> {
        const response = await this.searchBibleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchBibleSortEnum = {
    Relevance: 'relevance',
    Canonical: 'canonical',
    ReverseCanonical: 'reverse-canonical'
} as const;
export type SearchBibleSortEnum = typeof SearchBibleSortEnum[keyof typeof SearchBibleSortEnum];
/**
 * @export
 */
export const SearchBibleFuzzinessEnum = {
    Auto: 'AUTO',
    _0: '0',
    _1: '1',
    _2: '2'
} as const;
export type SearchBibleFuzzinessEnum = typeof SearchBibleFuzzinessEnum[keyof typeof SearchBibleFuzzinessEnum];
