/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetBookSections200Response,
  GetSection200Response,
} from '../models/index';
import {
    GetBookSections200ResponseFromJSON,
    GetBookSections200ResponseToJSON,
    GetSection200ResponseFromJSON,
    GetSection200ResponseToJSON,
} from '../models/index';

export interface GetBookSectionsRequest {
    bibleId: string;
    bookId: string;
}

export interface GetChapterSectionsRequest {
    bibleId: string;
    chapterId: string;
}

export interface GetSectionRequest {
    bibleId: string;
    sectionId: string;
    contentType?: GetSectionContentTypeEnum;
    includeNotes?: boolean;
    includeTitles?: boolean;
    includeChapterNumbers?: boolean;
    includeVerseNumbers?: boolean;
    includeVerseSpans?: boolean;
    parallels?: string;
}

/**
 * 
 */
export class SectionsApi extends runtime.BaseAPI {

    /**
     * Gets an array of `Section` objects for a given `bibleId` and `bookId` 
     */
    async getBookSectionsRaw(requestParameters: GetBookSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBookSections200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getBookSections().'
            );
        }

        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBookSections().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/books/{bookId}/sections`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBookSections200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of `Section` objects for a given `bibleId` and `bookId` 
     */
    async getBookSections(requestParameters: GetBookSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBookSections200Response> {
        const response = await this.getBookSectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of `Section` objects for a given `bibleId` and `chapterId` 
     */
    async getChapterSectionsRaw(requestParameters: GetChapterSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBookSections200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getChapterSections().'
            );
        }

        if (requestParameters['chapterId'] == null) {
            throw new runtime.RequiredError(
                'chapterId',
                'Required parameter "chapterId" was null or undefined when calling getChapterSections().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/chapters/{chapterId}/sections`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"chapterId"}}`, encodeURIComponent(String(requestParameters['chapterId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBookSections200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets an array of `Section` objects for a given `bibleId` and `chapterId` 
     */
    async getChapterSections(requestParameters: GetChapterSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBookSections200Response> {
        const response = await this.getChapterSectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single `Section` object for a given `bibleId` and `sectionId`. This Section object also includes an `content` property with all verses for the Section. 
     */
    async getSectionRaw(requestParameters: GetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSection200Response>> {
        if (requestParameters['bibleId'] == null) {
            throw new runtime.RequiredError(
                'bibleId',
                'Required parameter "bibleId" was null or undefined when calling getSection().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling getSection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contentType'] != null) {
            queryParameters['content-type'] = requestParameters['contentType'];
        }

        if (requestParameters['includeNotes'] != null) {
            queryParameters['include-notes'] = requestParameters['includeNotes'];
        }

        if (requestParameters['includeTitles'] != null) {
            queryParameters['include-titles'] = requestParameters['includeTitles'];
        }

        if (requestParameters['includeChapterNumbers'] != null) {
            queryParameters['include-chapter-numbers'] = requestParameters['includeChapterNumbers'];
        }

        if (requestParameters['includeVerseNumbers'] != null) {
            queryParameters['include-verse-numbers'] = requestParameters['includeVerseNumbers'];
        }

        if (requestParameters['includeVerseSpans'] != null) {
            queryParameters['include-verse-spans'] = requestParameters['includeVerseSpans'];
        }

        if (requestParameters['parallels'] != null) {
            queryParameters['parallels'] = requestParameters['parallels'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/bibles/{bibleId}/sections/{sectionId}`;
        urlPath = urlPath.replace(`{${"bibleId"}}`, encodeURIComponent(String(requestParameters['bibleId'])));
        urlPath = urlPath.replace(`{${"sectionId"}}`, encodeURIComponent(String(requestParameters['sectionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSection200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a single `Section` object for a given `bibleId` and `sectionId`. This Section object also includes an `content` property with all verses for the Section. 
     */
    async getSection(requestParameters: GetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSection200Response> {
        const response = await this.getSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetSectionContentTypeEnum = {
    Html: 'html',
    Json: 'json',
    Text: 'text'
} as const;
export type GetSectionContentTypeEnum = typeof GetSectionContentTypeEnum[keyof typeof GetSectionContentTypeEnum];
