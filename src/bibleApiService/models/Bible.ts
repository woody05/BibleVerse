/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BibleSummaryCountriesInner } from './BibleSummaryCountriesInner';
import {
    BibleSummaryCountriesInnerFromJSON,
    BibleSummaryCountriesInnerFromJSONTyped,
    BibleSummaryCountriesInnerToJSON,
    BibleSummaryCountriesInnerToJSONTyped,
} from './BibleSummaryCountriesInner';
import type { Language } from './Language';
import {
    LanguageFromJSON,
    LanguageFromJSONTyped,
    LanguageToJSON,
    LanguageToJSONTyped,
} from './Language';
import type { AudioBibleSummary } from './AudioBibleSummary';
import {
    AudioBibleSummaryFromJSON,
    AudioBibleSummaryFromJSONTyped,
    AudioBibleSummaryToJSON,
    AudioBibleSummaryToJSONTyped,
} from './AudioBibleSummary';

/**
 * 
 * @export
 * @interface Bible
 */
export interface Bible {
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    dblId: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    abbreviation: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    abbreviationLocal: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    copyright: string;
    /**
     * 
     * @type {Language}
     * @memberof Bible
     */
    language: Language;
    /**
     * 
     * @type {Array<BibleSummaryCountriesInner>}
     * @memberof Bible
     */
    countries: Array<BibleSummaryCountriesInner>;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    nameLocal: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    descriptionLocal: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    info: string;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    type: string;
    /**
     * 
     * @type {Date}
     * @memberof Bible
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Bible
     */
    relatedDbl: string;
    /**
     * 
     * @type {Array<AudioBibleSummary>}
     * @memberof Bible
     */
    audioBibles: Array<AudioBibleSummary>;
}

/**
 * Check if a given object implements the Bible interface.
 */
export function instanceOfBible(value: object): value is Bible {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('dblId' in value) || value['dblId'] === undefined) return false;
    if (!('abbreviation' in value) || value['abbreviation'] === undefined) return false;
    if (!('abbreviationLocal' in value) || value['abbreviationLocal'] === undefined) return false;
    if (!('copyright' in value) || value['copyright'] === undefined) return false;
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('countries' in value) || value['countries'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nameLocal' in value) || value['nameLocal'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('descriptionLocal' in value) || value['descriptionLocal'] === undefined) return false;
    if (!('info' in value) || value['info'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('relatedDbl' in value) || value['relatedDbl'] === undefined) return false;
    if (!('audioBibles' in value) || value['audioBibles'] === undefined) return false;
    return true;
}

export function BibleFromJSON(json: any): Bible {
    return BibleFromJSONTyped(json, false);
}

export function BibleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bible {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'dblId': json['dblId'],
        'abbreviation': json['abbreviation'],
        'abbreviationLocal': json['abbreviationLocal'],
        'copyright': json['copyright'],
        'language': LanguageFromJSON(json['language']),
        'countries': ((json['countries'] as Array<any>).map(BibleSummaryCountriesInnerFromJSON)),
        'name': json['name'],
        'nameLocal': json['nameLocal'],
        'description': json['description'],
        'descriptionLocal': json['descriptionLocal'],
        'info': json['info'],
        'type': json['type'],
        'updatedAt': (new Date(json['updatedAt'])),
        'relatedDbl': json['relatedDbl'],
        'audioBibles': ((json['audioBibles'] as Array<any>).map(AudioBibleSummaryFromJSON)),
    };
}

export function BibleToJSON(json: any): Bible {
    return BibleToJSONTyped(json, false);
}

export function BibleToJSONTyped(value?: Bible | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'dblId': value['dblId'],
        'abbreviation': value['abbreviation'],
        'abbreviationLocal': value['abbreviationLocal'],
        'copyright': value['copyright'],
        'language': LanguageToJSON(value['language']),
        'countries': ((value['countries'] as Array<any>).map(BibleSummaryCountriesInnerToJSON)),
        'name': value['name'],
        'nameLocal': value['nameLocal'],
        'description': value['description'],
        'descriptionLocal': value['descriptionLocal'],
        'info': value['info'],
        'type': value['type'],
        'updatedAt': ((value['updatedAt']).toISOString()),
        'relatedDbl': value['relatedDbl'],
        'audioBibles': ((value['audioBibles'] as Array<any>).map(AudioBibleSummaryToJSON)),
    };
}

