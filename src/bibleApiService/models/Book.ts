/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChapterSummary } from './ChapterSummary';
import {
    ChapterSummaryFromJSON,
    ChapterSummaryFromJSONTyped,
    ChapterSummaryToJSON,
    ChapterSummaryToJSONTyped,
} from './ChapterSummary';

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    bibleId: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    abbreviation: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    nameLong: string;
    /**
     * 
     * @type {Array<ChapterSummary>}
     * @memberof Book
     */
    chapters?: Array<ChapterSummary>;
}

/**
 * Check if a given object implements the Book interface.
 */
export function instanceOfBook(value: object): value is Book {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('bibleId' in value) || value['bibleId'] === undefined) return false;
    if (!('abbreviation' in value) || value['abbreviation'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('nameLong' in value) || value['nameLong'] === undefined) return false;
    return true;
}

export function BookFromJSON(json: any): Book {
    return BookFromJSONTyped(json, false);
}

export function BookFromJSONTyped(json: any, ignoreDiscriminator: boolean): Book {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'bibleId': json['bibleId'],
        'abbreviation': json['abbreviation'],
        'name': json['name'],
        'nameLong': json['nameLong'],
        'chapters': json['chapters'] == null ? undefined : ((json['chapters'] as Array<any>).map(ChapterSummaryFromJSON)),
    };
}

export function BookToJSON(json: any): Book {
    return BookToJSONTyped(json, false);
}

export function BookToJSONTyped(value?: Book | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'bibleId': value['bibleId'],
        'abbreviation': value['abbreviation'],
        'name': value['name'],
        'nameLong': value['nameLong'],
        'chapters': value['chapters'] == null ? undefined : ((value['chapters'] as Array<any>).map(ChapterSummaryToJSON)),
    };
}

