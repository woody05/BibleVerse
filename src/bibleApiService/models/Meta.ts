/* tslint:disable */
/* eslint-disable */
/**
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * 
     * @type {string}
     * @memberof Meta
     */
    fums: string;
    /**
     * 
     * @type {string}
     * @memberof Meta
     */
    fumsId: string;
    /**
     * 
     * @type {string}
     * @memberof Meta
     */
    fumsJsInclude: string;
    /**
     * 
     * @type {string}
     * @memberof Meta
     */
    fumsJs: string;
    /**
     * 
     * @type {string}
     * @memberof Meta
     */
    fumsNoScript: string;
}

/**
 * Check if a given object implements the Meta interface.
 */
export function instanceOfMeta(value: object): value is Meta {
    if (!('fums' in value) || value['fums'] === undefined) return false;
    if (!('fumsId' in value) || value['fumsId'] === undefined) return false;
    if (!('fumsJsInclude' in value) || value['fumsJsInclude'] === undefined) return false;
    if (!('fumsJs' in value) || value['fumsJs'] === undefined) return false;
    if (!('fumsNoScript' in value) || value['fumsNoScript'] === undefined) return false;
    return true;
}

export function MetaFromJSON(json: any): Meta {
    return MetaFromJSONTyped(json, false);
}

export function MetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meta {
    if (json == null) {
        return json;
    }
    return {
        
        'fums': json['fums'],
        'fumsId': json['fumsId'],
        'fumsJsInclude': json['fumsJsInclude'],
        'fumsJs': json['fumsJs'],
        'fumsNoScript': json['fumsNoScript'],
    };
}

export function MetaToJSON(json: any): Meta {
    return MetaToJSONTyped(json, false);
}

export function MetaToJSONTyped(value?: Meta | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fums': value['fums'],
        'fumsId': value['fumsId'],
        'fumsJsInclude': value['fumsJsInclude'],
        'fumsJs': value['fumsJs'],
        'fumsNoScript': value['fumsNoScript'],
    };
}

